{"version":3,"sources":["components/Header.js","components/Movie.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","Movie","movie","poster","Poster","Title","width","alt","src","Year","Search","useState","term","year","plot","searchValue","setSearchValue","handleSearchInputChanges","e","target","name","value","onChange","type","id","onClick","preventDefault","search","console","log","App","useReducer","state","action","loading","errorMessage","payload","movies","length","error","dispatch","useEffect","fetch","then","response","json","jsonResponse","url","trim","Number","isInteger","parseInt","Response","Error","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9919f056.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = props => {\r\n  return (\r\n    <header className=\"App-header\">\r\n      <h2>{props.text}</h2>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\n\nconst default_img =\n  \"https://images-na.ssl-images-amazon.com/images/I/51gD%2BEFFDoL.jpg\";\n\nconst Movie = ({ movie }) => {\n  const poster = movie.Poster === \"N/A\" ? default_img : movie.Poster;\n  return (\n    <div className=\"movie\">\n      <h2>{movie.Title}</h2>\n      <div>\n        <img\n          width=\"200\"\n          alt={`The movie titled: ${movie.Title}`}\n          src={poster}\n        />\n      </div>\n      <p>({movie.Year})</p>\n    </div>\n  );\n};\n\nexport default Movie;\n","import React, { useState } from \"react\";\r\n\r\nconst Search = props => {\r\n  const [searchValue, setSearchValue] = useState({\r\n    term: \"\",\r\n    year: \"\",\r\n    plot: \"short\"\r\n  });\r\n\r\n  const handleSearchInputChanges = e => {\r\n    setSearchValue({ ...searchValue, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const resetInputField = () => {\r\n    console.log(\"resetting...\");\r\n    setSearchValue({ term: \"\", year: \"\", plot: \"short\" });\r\n  };\r\n\r\n  const callSearchFunction = e => {\r\n    e.preventDefault();\r\n    props.search(searchValue);\r\n    resetInputField();\r\n  };\r\n\r\n  return (\r\n    <form className=\"search\">\r\n      <label>Title</label>\r\n      <input\r\n        name=\"term\"\r\n        value={searchValue.term}\r\n        onChange={handleSearchInputChanges}\r\n        type=\"text\"\r\n      />\r\n      <label>Year</label>\r\n      <input\r\n        id=\"year\"\r\n        name=\"year\"\r\n        value={searchValue.year}\r\n        onChange={handleSearchInputChanges}\r\n        type=\"text\"\r\n      ></input>\r\n      <label>Plot Summary</label>\r\n      <select onChange={handleSearchInputChanges} name=\"plot\">\r\n        <option value=\"short\">Short</option>\r\n        <option value=\"full\">Full</option>\r\n      </select>\r\n      <input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Movie from \"./components/Movie\";\nimport Search from \"./components/Search\";\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=love&apikey=5172077c\";\n\nconst App = () => {\n  const initialState = {\n    loading: true,\n    movies: [],\n    errorMessage: null\n  };\n\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case \"SEARCH_MOVIES_REQUEST\":\n        return {\n          ...state,\n          loading: true,\n          errorMessage: null\n        };\n      case \"SEARCH_MOVIES_SUCCESS\":\n        console.log(action.payload);\n        return {\n          ...state,\n          loading: false,\n          movies: !action.payload.length ? [action.payload] : action.payload\n        };\n      case \"SEARCH_MOVIES_FAILURE\":\n        return {\n          ...state,\n          loading: false,\n          errorMessage: action.error\n        };\n      default:\n        return state;\n    }\n  };\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    fetch(MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        dispatch({\n          type: \"SEARCH_MOVIES_SUCCESS\",\n          payload: jsonResponse.Search\n        });\n      });\n  }, []);\n\n  const search = searchValue => {\n    dispatch({\n      type: \"SEARCH_MOVIES_REQUEST\"\n    });\n\n    let url = `https://www.omdbapi.com/?s=${searchValue.term.trim()}&y=${\n      Number.isInteger(parseInt(searchValue.year)) ? searchValue.year : \"\"\n    }&plot=${searchValue.plot}&apikey=5172077c`;\n    console.log(url);\n\n    fetch(url)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        console.log(jsonResponse);\n        if (jsonResponse.Response === \"True\") {\n          dispatch({\n            type: \"SEARCH_MOVIES_SUCCESS\",\n            payload: jsonResponse.Search || jsonResponse\n          });\n        } else {\n          dispatch({\n            type: \"SEARCH_MOVIES_FAILURE\",\n            error: jsonResponse.Error\n          });\n        }\n      });\n  };\n\n  const { movies, errorMessage, loading } = state;\n\n  return (\n    <div className=\"App\">\n      <Header text=\"React Movie Search App\" />\n      <Search search={search} />\n      <p className=\"App-intro\">Some of my favs to get you started</p>\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n          <span>loading... </span>\n        ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movie key={`${index}-${movie.Title}`} movie={movie} />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}